name: Build & Test

on: 
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]

env:
  GO_VERSION: stable

jobs:
  # Security vulnerability check
  govulncheck:
    name: Security Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest
      - name: Run vulnerability check
        run: govulncheck ./...

  # Multi-platform build verification
  build:
    name: Build (${{ matrix.os }})
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      GO111MODULE: "on"
      CI: "true"
      GLOW_TTS_MOCK_AUDIO: "true"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Install minimal dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          # Only install build dependencies, not runtime audio libs
          sudo apt-get update
          sudo apt-get install -y build-essential
      
      - name: Verify build environment (macOS)
        if: runner.os == 'macOS'
        run: |
          echo "macOS build environment ready"
          echo "CoreAudio headers available at compile time"
      
      - name: Verify build environment (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "Windows build environment ready"
          echo "WASAPI headers available at compile time"

      - name: Download dependencies
        run: go mod download
      
      - name: Build project
        run: |
          echo "Building on ${{ matrix.os }}..."
          go build -v ./...
      
      - name: Run quick smoke tests
        run: |
          echo "Running quick smoke tests with mock audio..."
          go test -v -short -race -timeout 30s ./pkg/tts/...

  semgrep:
    uses: charmbracelet/meta/.github/workflows/semgrep.yml@main

  # Ruleguard moved to static-analysis.yml due to CGO issues
  # See .github/workflows/static-analysis.yml for comprehensive static analysis

  # Workflow status notification
  notify-on-failure:
    name: Notify on Failure
    if: failure() && github.ref == 'refs/heads/main'
    needs: [govulncheck, build]
    runs-on: ubuntu-latest
    steps:
      - name: Create failure notification
        uses: actions/github-script@v7
        with:
          script: |
            const workflow = '${{ github.workflow }}';
            const runUrl = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
            const commit = '${{ github.sha }}'.substring(0, 7);
            const branch = '${{ github.ref_name }}';
            
            // Create issue comment or notification
            console.log(`Workflow ${workflow} failed on ${branch} (${commit})`);
            console.log(`View run: ${runUrl}`);
            
            // For critical failures, you could create an issue:
            // await github.rest.issues.create({
            //   owner: context.repo.owner,
            //   repo: context.repo.repo,
            //   title: `CI Failure: ${workflow} on ${branch}`,
            //   body: `The ${workflow} workflow failed on branch ${branch}.\n\nCommit: ${commit}\n[View failed run](${runUrl})`,
            //   labels: ['ci-failure']
            // });