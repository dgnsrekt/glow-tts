name: Static Analysis

on:
  push:
    branches: [main, master, develop, feature/*, fix/*]
  pull_request:
    branches: [main, master]

env:
  GO_VERSION: stable

jobs:
  # Golangci-lint with CGO handling
  golangci-lint:
    name: Go Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Install audio dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libasound2-dev
      
      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.2
      
      - name: Run golangci-lint
        run: |
          echo "Running linter..."
          # Run without nocgo tag as it causes too many import issues
          # The linter will still check for code quality issues
          golangci-lint run --config=.golangci.manual.yml --timeout=5m \
            --skip-dirs=ui \
            --skip-dirs=utils \
            ./...

  # Staticcheck analysis
  staticcheck:
    name: Staticcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Install staticcheck
        run: go install honnef.co/go/tools/cmd/staticcheck@latest
      
      - name: Run staticcheck
        run: |
          echo "Running staticcheck..."
          staticcheck ./...

  # Go vet analysis
  go-vet:
    name: Go Vet
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Run go vet
        run: |
          echo "Running go vet..."
          go vet ./...

  # Ineffassign - detect ineffectual assignments
  ineffassign:
    name: Ineffassign
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Install ineffassign
        run: go install github.com/gordonklaus/ineffassign@latest
      
      - name: Run ineffassign
        run: |
          echo "Checking for ineffectual assignments..."
          ineffassign ./...

  # Gosec - security checker
  gosec:
    name: Security Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Install gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest
      
      - name: Run gosec
        run: |
          echo "Running security checks..."
          gosec -fmt=sarif -out=gosec-results.sarif ./... || true
      
      - name: Upload SARIF file
        if: always()
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: gosec-results.sarif
        continue-on-error: true

  # Custom ruleguard without CGO issues
  ruleguard-custom:
    name: Ruleguard Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
      
      - name: Install ruleguard
        run: go install github.com/quasilyte/go-ruleguard/cmd/ruleguard@latest
      
      - name: Download rules
        run: |
          # Download standard ruleguard rules
          curl -L https://raw.githubusercontent.com/quasilyte/go-ruleguard/master/rules/rules.go -o rules.go
      
      - name: Run ruleguard
        run: |
          echo "Running ruleguard analysis..."
          # Run on all packages
          ruleguard -rules rules.go ./... || true

  # Summary of all checks
  analysis-summary:
    name: Analysis Summary
    if: always()
    needs: [golangci-lint, staticcheck, go-vet, ineffassign, gosec, ruleguard-custom]
    runs-on: ubuntu-latest
    steps:
      - name: Check analysis results
        run: |
          echo "## Static Analysis Summary"
          echo "- golangci-lint: ${{ needs.golangci-lint.result }}"
          echo "- staticcheck: ${{ needs.staticcheck.result }}"
          echo "- go-vet: ${{ needs.go-vet.result }}"
          echo "- ineffassign: ${{ needs.ineffassign.result }}"
          echo "- gosec: ${{ needs.gosec.result }}"
          echo "- ruleguard: ${{ needs.ruleguard-custom.result }}"
          
          # Don't fail the workflow for static analysis issues

  # Send notifications to ntfy.sh
  notify:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: [golangci-lint, staticcheck, go-vet, ineffassign, gosec, ruleguard-custom, analysis-summary]
    if: always()
    steps:
      - name: Send success notification
        if: ${{ success() }}
        run: |
          curl -H "Title: Glow-TTS CI - Static Analysis Passed ✅" \
               -H "Priority: 3" \
               -H "Tags: white_check_mark" \
               -d "Static analysis completed successfully for ${{ github.repository }}

          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
               https://ntfy.sh/glow-tts-cicd

      - name: Send failure notification
        if: ${{ failure() }}
        run: |
          curl -H "Title: Glow-TTS CI - Static Analysis Failed ❌" \
               -H "Priority: 4" \
               -H "Tags: x" \
               -d "Static analysis found issues in ${{ github.repository }}

          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
               https://ntfy.sh/glow-tts-cicd

      - name: Send cancellation notification
        if: ${{ cancelled() }}
        run: |
          curl -H "Title: Glow-TTS CI - Static Analysis Cancelled ⚠️" \
               -H "Priority: 3" \
               -H "Tags: warning" \
               -d "Static analysis was cancelled for ${{ github.repository }}

          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
               https://ntfy.sh/glow-tts-cicd